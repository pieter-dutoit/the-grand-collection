/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations
  }
  collections: {
    amenities: Amenity
    beds: Bed
    users: User
    media: Media
    'seo-media': SeoMedia
    guesthouses: Guesthouse
    rooms: Room
    'contact-persons': ContactPerson
    'social-media-platforms': SocialMediaPlatform
    'payload-locked-documents': PayloadLockedDocument
    'payload-preferences': PayloadPreference
    'payload-migrations': PayloadMigration
  }
  collectionsJoins: {}
  collectionsSelect: {
    amenities: AmenitiesSelect<false> | AmenitiesSelect<true>
    beds: BedsSelect<false> | BedsSelect<true>
    users: UsersSelect<false> | UsersSelect<true>
    media: MediaSelect<false> | MediaSelect<true>
    'seo-media': SeoMediaSelect<false> | SeoMediaSelect<true>
    guesthouses: GuesthousesSelect<false> | GuesthousesSelect<true>
    rooms: RoomsSelect<false> | RoomsSelect<true>
    'contact-persons': ContactPersonsSelect<false> | ContactPersonsSelect<true>
    'social-media-platforms':
      | SocialMediaPlatformsSelect<false>
      | SocialMediaPlatformsSelect<true>
    'payload-locked-documents':
      | PayloadLockedDocumentsSelect<false>
      | PayloadLockedDocumentsSelect<true>
    'payload-preferences':
      | PayloadPreferencesSelect<false>
      | PayloadPreferencesSelect<true>
    'payload-migrations':
      | PayloadMigrationsSelect<false>
      | PayloadMigrationsSelect<true>
  }
  db: {
    defaultIDType: string
  }
  globals: {
    logos: Logo
    'home-page': HomePage
    'guesthouses-page': GuesthousesPage
  }
  globalsSelect: {
    logos: LogosSelect<false> | LogosSelect<true>
    'home-page': HomePageSelect<false> | HomePageSelect<true>
    'guesthouses-page':
      | GuesthousesPageSelect<false>
      | GuesthousesPageSelect<true>
  }
  locale: null
  user: User & {
    collection: 'users'
  }
  jobs: {
    tasks: unknown
    workflows: unknown
  }
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string
    password: string
  }
  login: {
    email: string
    password: string
  }
  registerFirstUser: {
    email: string
    password: string
  }
  unlock: {
    email: string
    password: string
  }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities".
 */
export interface Amenity {
  id: string
  name: string
  description?: string | null
  icon: string | Media
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string
  alt: string
  prefix?: string | null
  updatedAt: string
  createdAt: string
  url?: string | null
  thumbnailURL?: string | null
  filename?: string | null
  mimeType?: string | null
  filesize?: number | null
  width?: number | null
  height?: number | null
  focalX?: number | null
  focalY?: number | null
  sizes?: {
    thumbnail?: {
      url?: string | null
      width?: number | null
      height?: number | null
      mimeType?: string | null
      filesize?: number | null
      filename?: string | null
    }
  }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "beds".
 */
export interface Bed {
  id: string
  name: string
  icon: string | Media
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string
  roles?: ('admin' | 'editor')[] | null
  updatedAt: string
  createdAt: string
  email: string
  resetPasswordToken?: string | null
  resetPasswordExpiration?: string | null
  salt?: string | null
  hash?: string | null
  loginAttempts?: number | null
  lockUntil?: string | null
  password?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seo-media".
 */
export interface SeoMedia {
  id: string
  alt: string
  prefix?: string | null
  updatedAt: string
  createdAt: string
  url?: string | null
  thumbnailURL?: string | null
  filename?: string | null
  mimeType?: string | null
  filesize?: number | null
  width?: number | null
  height?: number | null
  focalX?: number | null
  focalY?: number | null
  sizes?: {
    thumbnail?: {
      url?: string | null
      width?: number | null
      height?: number | null
      mimeType?: string | null
      filesize?: number | null
      filename?: string | null
    }
    twitter?: {
      url?: string | null
      width?: number | null
      height?: number | null
      mimeType?: string | null
      filesize?: number | null
      filename?: string | null
    }
  }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guesthouses".
 */
export interface Guesthouse {
  id: string
  name: string
  slug?: string | null
  booking_platform: {
    name: 'NightsBridge'
    url: string
  }
  content: {
    heading: string
    description: string
    gallery: {
      heading: string
      description: string
    }
    images: {
      background_image: string | Media
      exterior: (string | Media)[]
      interior: (string | Media)[]
    }
    amenities: {
      heading: string
      description: string
      background_image: string | Media
      general_amenities: (string | Amenity)[]
    }
    rooms: {
      heading: string
      description: string
      people_icon: string | Media
      rooms?: (string | Room)[] | null
    }
  }
  contact_details: {
    contact_persons?: (string | ContactPerson)[] | null
    address: {
      street: string
      suburb: string
      city: string
      province:
        | 'Eastern Cape'
        | 'Free State'
        | 'Gauteng'
        | 'KwaZulu-Natal'
        | 'Limpopo'
        | 'Mpumalanga'
        | 'Northern Cape'
        | 'North West'
        | 'Western Cape'
      postalCode: string
    }
    socials?:
      | {
          platform: string | SocialMediaPlatform
          url: string
          id?: string | null
        }[]
      | null
  }
  seo: {
    meta: MetadataField
    open_graph: OpenGraphField
    twitter?: TwitterField
  }
  updatedAt: string
  createdAt: string
  _status?: ('draft' | 'published') | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rooms".
 */
export interface Room {
  id: string
  name: string
  description: string
  details: {
    sleeps_adults: number
    sleeps_children: number
    bed_count: {
      bed: string | Bed
      quantity: number
      id?: string | null
    }[]
  }
  amenities: (string | Amenity)[]
  gallery: (string | Media)[]
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-persons".
 */
export interface ContactPerson {
  id: string
  name: string
  email: string
  phone: string
  position?: string | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-media-platforms".
 */
export interface SocialMediaPlatform {
  id: string
  name: string
  icon: string | Media
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MetadataField".
 */
export interface MetadataField {
  title: string
  description: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OpenGraphField".
 */
export interface OpenGraphField {
  site_name: string
  title: string
  description: string
  image: string | SeoMedia
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwitterField".
 */
export interface TwitterField {
  creator?: string | null
  creatorId?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string
  document?:
    | ({
        relationTo: 'amenities'
        value: string | Amenity
      } | null)
    | ({
        relationTo: 'beds'
        value: string | Bed
      } | null)
    | ({
        relationTo: 'users'
        value: string | User
      } | null)
    | ({
        relationTo: 'media'
        value: string | Media
      } | null)
    | ({
        relationTo: 'seo-media'
        value: string | SeoMedia
      } | null)
    | ({
        relationTo: 'guesthouses'
        value: string | Guesthouse
      } | null)
    | ({
        relationTo: 'rooms'
        value: string | Room
      } | null)
    | ({
        relationTo: 'contact-persons'
        value: string | ContactPerson
      } | null)
    | ({
        relationTo: 'social-media-platforms'
        value: string | SocialMediaPlatform
      } | null)
  globalSlug?: string | null
  user: {
    relationTo: 'users'
    value: string | User
  }
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string
  user: {
    relationTo: 'users'
    value: string | User
  }
  key?: string | null
  value?:
    | {
        [k: string]: unknown
      }
    | unknown[]
    | string
    | number
    | boolean
    | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string
  name?: string | null
  batch?: number | null
  updatedAt: string
  createdAt: string
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities_select".
 */
export interface AmenitiesSelect<T extends boolean = true> {
  name?: T
  description?: T
  icon?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "beds_select".
 */
export interface BedsSelect<T extends boolean = true> {
  name?: T
  icon?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  roles?: T
  updatedAt?: T
  createdAt?: T
  email?: T
  resetPasswordToken?: T
  resetPasswordExpiration?: T
  salt?: T
  hash?: T
  loginAttempts?: T
  lockUntil?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T
  prefix?: T
  updatedAt?: T
  createdAt?: T
  url?: T
  thumbnailURL?: T
  filename?: T
  mimeType?: T
  filesize?: T
  width?: T
  height?: T
  focalX?: T
  focalY?: T
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T
              width?: T
              height?: T
              mimeType?: T
              filesize?: T
              filename?: T
            }
      }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "seo-media_select".
 */
export interface SeoMediaSelect<T extends boolean = true> {
  alt?: T
  prefix?: T
  updatedAt?: T
  createdAt?: T
  url?: T
  thumbnailURL?: T
  filename?: T
  mimeType?: T
  filesize?: T
  width?: T
  height?: T
  focalX?: T
  focalY?: T
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T
              width?: T
              height?: T
              mimeType?: T
              filesize?: T
              filename?: T
            }
        twitter?:
          | T
          | {
              url?: T
              width?: T
              height?: T
              mimeType?: T
              filesize?: T
              filename?: T
            }
      }
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guesthouses_select".
 */
export interface GuesthousesSelect<T extends boolean = true> {
  name?: T
  slug?: T
  booking_platform?:
    | T
    | {
        name?: T
        url?: T
      }
  content?:
    | T
    | {
        heading?: T
        description?: T
        gallery?:
          | T
          | {
              heading?: T
              description?: T
            }
        images?:
          | T
          | {
              background_image?: T
              exterior?: T
              interior?: T
            }
        amenities?:
          | T
          | {
              heading?: T
              description?: T
              background_image?: T
              general_amenities?: T
            }
        rooms?:
          | T
          | {
              heading?: T
              description?: T
              people_icon?: T
              rooms?: T
            }
      }
  contact_details?:
    | T
    | {
        contact_persons?: T
        address?:
          | T
          | {
              street?: T
              suburb?: T
              city?: T
              province?: T
              postalCode?: T
            }
        socials?:
          | T
          | {
              platform?: T
              url?: T
              id?: T
            }
      }
  seo?:
    | T
    | {
        meta?: T | MetadataFieldSelect<T>
        open_graph?: T | OpenGraphFieldSelect<T>
        twitter?: T | TwitterFieldSelect<T>
      }
  updatedAt?: T
  createdAt?: T
  _status?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MetadataField_select".
 */
export interface MetadataFieldSelect<T extends boolean = true> {
  title?: T
  description?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OpenGraphField_select".
 */
export interface OpenGraphFieldSelect<T extends boolean = true> {
  site_name?: T
  title?: T
  description?: T
  image?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TwitterField_select".
 */
export interface TwitterFieldSelect<T extends boolean = true> {
  creator?: T
  creatorId?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rooms_select".
 */
export interface RoomsSelect<T extends boolean = true> {
  name?: T
  description?: T
  details?:
    | T
    | {
        sleeps_adults?: T
        sleeps_children?: T
        bed_count?:
          | T
          | {
              bed?: T
              quantity?: T
              id?: T
            }
      }
  amenities?: T
  gallery?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contact-persons_select".
 */
export interface ContactPersonsSelect<T extends boolean = true> {
  name?: T
  email?: T
  phone?: T
  position?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "social-media-platforms_select".
 */
export interface SocialMediaPlatformsSelect<T extends boolean = true> {
  name?: T
  icon?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T
  globalSlug?: T
  user?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T
  key?: T
  value?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T
  batch?: T
  updatedAt?: T
  createdAt?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logos".
 */
export interface Logo {
  id: string
  logo_dark: string | Media
  logo_light: string | Media
  minimal_dark: string | Media
  minimal_light: string | Media
  _status?: ('draft' | 'published') | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-page".
 */
export interface HomePage {
  id: string
  hero: {
    background_image: string | Media
    title: string
    locations_link: {
      link_text: string
      link_url: string
    }
  }
  overview: {
    heading: string
    description: string
    images: (string | Media)[]
    features: {
      title: string
      description: string
      id?: string | null
    }[]
    locations_link: {
      link_text: string
      link_url: string
    }
  }
  featured: {
    heading: string
    subheading: string
    guesthouses: (string | Guesthouse)[]
  }
  socials?:
    | {
        platform: string | SocialMediaPlatform
        url: string
        id?: string | null
      }[]
    | null
  contactPersons?: (string | ContactPerson)[] | null
  seo: {
    meta: MetadataField
    open_graph: OpenGraphField
    twitter?: TwitterField
  }
  _status?: ('draft' | 'published') | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guesthouses-page".
 */
export interface GuesthousesPage {
  id: string
  content: {
    heading: string
    sub_heading: string
  }
  seo: {
    meta: MetadataField
    open_graph: OpenGraphField
    twitter?: TwitterField
  }
  _status?: ('draft' | 'published') | null
  updatedAt?: string | null
  createdAt?: string | null
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logos_select".
 */
export interface LogosSelect<T extends boolean = true> {
  logo_dark?: T
  logo_light?: T
  minimal_dark?: T
  minimal_light?: T
  _status?: T
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "home-page_select".
 */
export interface HomePageSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        background_image?: T
        title?: T
        locations_link?:
          | T
          | {
              link_text?: T
              link_url?: T
            }
      }
  overview?:
    | T
    | {
        heading?: T
        description?: T
        images?: T
        features?:
          | T
          | {
              title?: T
              description?: T
              id?: T
            }
        locations_link?:
          | T
          | {
              link_text?: T
              link_url?: T
            }
      }
  featured?:
    | T
    | {
        heading?: T
        subheading?: T
        guesthouses?: T
      }
  socials?:
    | T
    | {
        platform?: T
        url?: T
        id?: T
      }
  contactPersons?: T
  seo?:
    | T
    | {
        meta?: T | MetadataFieldSelect<T>
        open_graph?: T | OpenGraphFieldSelect<T>
        twitter?: T | TwitterFieldSelect<T>
      }
  _status?: T
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guesthouses-page_select".
 */
export interface GuesthousesPageSelect<T extends boolean = true> {
  content?:
    | T
    | {
        heading?: T
        sub_heading?: T
      }
  seo?:
    | T
    | {
        meta?: T | MetadataFieldSelect<T>
        open_graph?: T | OpenGraphFieldSelect<T>
        twitter?: T | TwitterFieldSelect<T>
      }
  _status?: T
  updatedAt?: T
  createdAt?: T
  globalType?: T
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown
}

declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
